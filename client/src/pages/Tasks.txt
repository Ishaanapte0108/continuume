import React, { useState, useEffect } from 'react';
import Footer from '../components/Footer';

const Tasks = ({ userId }) => {
  const [tasks, setTasks] = useState([]);
  const [sortOption, setSortOption] = useState('dateAsc');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const response = await fetch(`/api/tasks/read/${userId}`); // Assuming your API endpoint follows this pattern
        if (!response.ok) {
          throw new Error('Failed to fetch tasks');
        }
        const data = await response.json();
        setTasks(data.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate)));
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchTasks();
  }, [userId]);

  const sortTasks = (option) => {
    let sortedTasks = [...tasks];
    if (option === 'titleAsc') {
      sortedTasks.sort((a, b) => a.title.localeCompare(b.title));
    } else if (option === 'titleDesc') {
      sortedTasks.sort((a, b) => b.title.localeCompare(a.title));
    } else if (option === 'dateAsc') {
      sortedTasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
    } else if (option === 'dateDesc') {
      sortedTasks.sort((a, b) => new Date(b.dueDate) - new Date(a.dueDate));
    }
    setTasks(sortedTasks);
    setSortOption(option);
  };

  const toggleTaskStatus = (id) => {
    const updatedTasks = tasks.map(task => 
      task.id === id ? { ...task, status: task.status === 'completed' ? 'pending' : 'completed' } : task
    );
    setTasks(updatedTasks);
  };

  const truncateTitle = (title, maxLength) => {
    if (title.length > maxLength + 2) {
      return title.substring(0, maxLength) + "...";
    }
    return title;
  };

  if (loading) return <div>Loading tasks...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <>
      <div className="max-w-5xl mx-auto pt-4 pb-12">
        <h2 className="text-2xl font-semibold text-gray-900 mb-5 text-center">Tasks</h2>

        <div className="flex justify-between items-center mb-4">
          <label htmlFor="sort" className="mr-2 text-gray-700">Sort by:</label>
          <select
            id="sort"
            value={sortOption}
            onChange={(e) => sortTasks(e.target.value)}
            className="px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none"
          >
            <option value="titleAsc">Title (A-Z)</option>
            <option value="titleDesc">Title (Z-A)</option>
            <option value="dateAsc">Due Date (Earliest First)</option>
            <option value="dateDesc">Due Date (Latest First)</option>
          </select>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {tasks.map((task) => (
            <div
              key={task.id}
              className={`p-4 rounded-lg shadow-md bg-gray-50 border border-gray-200 ${task.status === 'completed' ? 'opacity-75' : ''}`}
            >
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium text-gray-900">{truncateTitle(task.title, 15)}</h3>
                <button
                  onClick={() => toggleTaskStatus(task.id)}
                  className={`px-3 py-1 text-xs font-semibold rounded-md ${task.status === 'completed' ? 'text-red-500 border border-red-500' : 'text-green-500 border border-green-500'}`}
                >
                  {task.status === 'completed' ? 'Mark as Incomplete' : 'Mark as Completed'}
                </button>
              </div>
              <p className="mt-2 text-sm text-gray-600">{task.description}</p>
              <p className="mt-2 text-sm text-gray-600">Due: {task.dueDate}</p>
            </div>
          ))}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Tasks;
